{"ast":null,"code":"import { SET_USER, SET_ERRORS, CLEAR_ERRORS, LOADING_UI, SET_UNAUTHENTICATED, SET_AUTHENTICATED, LOADING_USER, LIKE_SCREAM, UNLIKE_SCREAM, MARK_NOTIFICATIONS_READ } from \"../types\";\nconst initialState = {\n  authenticated: false,\n  loading: false,\n  credentials: {},\n  likes: [],\n  comments: [],\n  notifications: []\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case SET_AUTHENTICATED:\n      return { ...state,\n        authenticated: true\n      };\n\n    case SET_UNAUTHENTICATED:\n      return initialState;\n\n    case SET_USER:\n      return {\n        authenticated: true,\n        loading: false,\n        ...action.payload\n      };\n\n    case LOADING_USER:\n      return { ...state,\n        loading: true\n      };\n\n    case LIKE_SCREAM:\n      return { ...state,\n        likes: [...state.likes, {\n          userHandle: state.credentials.handle,\n          screamId: action.payload.screamId\n        }]\n      };\n\n    case UNLIKE_SCREAM:\n      return { ...state,\n        likes: state.likes.filter(like => like.screamId !== action.payload.screamId)\n      };\n\n    case MARK_NOTIFICATIONS_READ:\n      state.notifications.forEach(not => not.read = true);\n      return { ...state\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/nikunj/socialape-client/src/redux/reducers/userReducer.js"],"names":["SET_USER","SET_ERRORS","CLEAR_ERRORS","LOADING_UI","SET_UNAUTHENTICATED","SET_AUTHENTICATED","LOADING_USER","LIKE_SCREAM","UNLIKE_SCREAM","MARK_NOTIFICATIONS_READ","initialState","authenticated","loading","credentials","likes","comments","notifications","state","action","type","payload","userHandle","handle","screamId","filter","like","forEach","not","read"],"mappings":"AAAA,SACEA,QADF,EAEEC,UAFF,EAGEC,YAHF,EAIEC,UAJF,EAKEC,mBALF,EAMEC,iBANF,EAOEC,YAPF,EAQEC,WARF,EASEC,aATF,EAUEC,uBAVF,QAWO,UAXP;AAaA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAE,KADI;AAEnBC,EAAAA,OAAO,EAAE,KAFU;AAGnBC,EAAAA,WAAW,EAAE,EAHM;AAInBC,EAAAA,KAAK,EAAE,EAJY;AAKnBC,EAAAA,QAAQ,EAAE,EALS;AAMnBC,EAAAA,aAAa,EAAE;AANI,CAArB;AASA,eAAe,UAAUC,KAAK,GAAGP,YAAlB,EAAgCQ,MAAhC,EAAwC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKd,iBAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELN,QAAAA,aAAa,EAAE;AAFV,OAAP;;AAKF,SAAKP,mBAAL;AACE,aAAOM,YAAP;;AAEF,SAAKV,QAAL;AACE,aAAO;AACLW,QAAAA,aAAa,EAAE,IADV;AAELC,QAAAA,OAAO,EAAE,KAFJ;AAGL,WAAGM,MAAM,CAACE;AAHL,OAAP;;AAKF,SAAKd,YAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELL,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF,SAAKL,WAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELH,QAAAA,KAAK,EAAE,CACL,GAAGG,KAAK,CAACH,KADJ,EAEL;AACEO,UAAAA,UAAU,EAAEJ,KAAK,CAACJ,WAAN,CAAkBS,MADhC;AAEEC,UAAAA,QAAQ,EAAEL,MAAM,CAACE,OAAP,CAAeG;AAF3B,SAFK;AAFF,OAAP;;AAUF,SAAKf,aAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELH,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYU,MAAZ,CACJC,IAAD,IAAUA,IAAI,CAACF,QAAL,KAAkBL,MAAM,CAACE,OAAP,CAAeG,QADtC;AAFF,OAAP;;AAMF,SAAKd,uBAAL;AACEQ,MAAAA,KAAK,CAACD,aAAN,CAAoBU,OAApB,CAA6BC,GAAD,IAAUA,GAAG,CAACC,IAAJ,GAAW,IAAjD;AACA,aAAO,EACL,GAAGX;AADE,OAAP;;AAGF;AACE,aAAOA,KAAP;AA7CJ;AA+CD","sourcesContent":["import {\n  SET_USER,\n  SET_ERRORS,\n  CLEAR_ERRORS,\n  LOADING_UI,\n  SET_UNAUTHENTICATED,\n  SET_AUTHENTICATED,\n  LOADING_USER,\n  LIKE_SCREAM,\n  UNLIKE_SCREAM,\n  MARK_NOTIFICATIONS_READ,\n} from \"../types\";\n\nconst initialState = {\n  authenticated: false,\n  loading: false,\n  credentials: {},\n  likes: [],\n  comments: [],\n  notifications: [],\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case SET_AUTHENTICATED:\n      return {\n        ...state,\n        authenticated: true,\n      };\n\n    case SET_UNAUTHENTICATED:\n      return initialState;\n\n    case SET_USER:\n      return {\n        authenticated: true,\n        loading: false,\n        ...action.payload,\n      };\n    case LOADING_USER:\n      return {\n        ...state,\n        loading: true,\n      };\n    case LIKE_SCREAM:\n      return {\n        ...state,\n        likes: [\n          ...state.likes,\n          {\n            userHandle: state.credentials.handle,\n            screamId: action.payload.screamId,\n          },\n        ],\n      };\n    case UNLIKE_SCREAM:\n      return {\n        ...state,\n        likes: state.likes.filter(\n          (like) => like.screamId !== action.payload.screamId\n        ),\n      };\n    case MARK_NOTIFICATIONS_READ:\n      state.notifications.forEach((not) => (not.read = true));\n      return {\n        ...state,\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}