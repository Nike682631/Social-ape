{"ast":null,"code":"var _jsxFileName = \"/home/nikunj/socialape-client/src/components/layout/Notifications.js\";\nimport React, { useEffect, useState, Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\nimport PropTypes from \"prop-types\"; //MUI stuff\n\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ToolTip from \"@material-ui/core/Tooltip\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Badge from \"@material-ui/core/Badge\"; //Icons\n\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport ChatIcon from \"@material-ui/icons/Chat\"; //Redux\n\nimport { connect } from \"react-redux\";\nimport { markNotificationsRead } from \"../../redux/actions/userActions\";\n\nfunction Notifications(props) {\n  const [state, setState] = useState({\n    anchorEl: null\n  });\n  const notifications = props.notifications;\n  const anchorEl = state.anchorEl;\n  let notificationsIcon;\n  dayjs.extend(relativeTime);\n\n  const handleOpen = event => {\n    setState({ ...state,\n      anchorEl: event.target\n    });\n  };\n\n  const handleClose = () => {\n    setState({\n      anchorEl: null\n    });\n  };\n\n  const onMenuOpened = () => {\n    let unreadNotificationsIds = props.notifications.filter(not => !not.read).map(not => not.notificationId);\n    props.markNotificationsRead(unreadNotificationsIds);\n  };\n\n  if (notifications && notifications.length > 0) {\n    notifications.filter(not => not.read === false).length > 0 ? notificationsIcon = /*#__PURE__*/React.createElement(Badge, {\n      badgeContent: notifications.filter(not => not.read === false).length,\n      color: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(NotificationsIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    })) : notificationsIcon = /*#__PURE__*/React.createElement(NotificationsIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 30\n      }\n    });\n  } else {\n    notificationsIcon = /*#__PURE__*/React.createElement(NotificationsIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }\n    });\n  }\n\n  let notificationsMarkup = notifications && notifications.length > 0 ? notifications.map(not => {\n    const verb = not.type === \"like\" ? \"liked\" : \"commented on\";\n    const time = dayjs(not.createdAt).fromNow();\n    const iconColor = not.read ? \"primary\" : \"secondary\";\n    const icon = not.type === \"like\" ? /*#__PURE__*/React.createElement(FavoriteIcon, {\n      color: iconColor,\n      style: {\n        marginRight: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }) : /*#__PURE__*/React.createElement(ChatIcon, {\n      color: iconColor,\n      style: {\n        marginRight: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    });\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: not.createdAt,\n      onClick: handleClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    }, icon, /*#__PURE__*/React.createElement(Typography, {\n      component: Link,\n      color: \"default\",\n      variant: \"body1\",\n      to: `/users/${not.recipient}/scream/${not.screamId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, not.sender, \" \", verb, \" your scream \", time));\n  }) : /*#__PURE__*/React.createElement(MenuItem, {\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, \"You have no notifications yet\");\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ToolTip, {\n    placement: \"top\",\n    title: \"Notifications\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    ariaowns: anchorEl ? \"simple-menu\" : undefined,\n    \"aria-haspopup\": \"true\",\n    onClick: handleOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, notificationsIcon)), /*#__PURE__*/React.createElement(Menu, {\n    anchorEl: anchorEl,\n    open: Boolean(anchorEl),\n    onClose: handleClose,\n    onEntered: onMenuOpened,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, notificationsMarkup));\n}\n\nNotifications.propTypes = {\n  markNotificationsRead: PropTypes.func.isRequired,\n  notifications: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  notifications: state.user.notifications\n});\n\nexport default connect(mapStateToProps, {\n  markNotificationsRead\n})(Notifications);","map":{"version":3,"sources":["/home/nikunj/socialape-client/src/components/layout/Notifications.js"],"names":["React","useEffect","useState","Fragment","Link","dayjs","relativeTime","PropTypes","Menu","MenuItem","IconButton","ToolTip","Typography","Badge","NotificationsIcon","FavoriteIcon","ChatIcon","connect","markNotificationsRead","Notifications","props","state","setState","anchorEl","notifications","notificationsIcon","extend","handleOpen","event","target","handleClose","onMenuOpened","unreadNotificationsIds","filter","not","read","map","notificationId","length","notificationsMarkup","verb","type","time","createdAt","fromNow","iconColor","icon","marginRight","recipient","screamId","sender","undefined","Boolean","propTypes","func","isRequired","object","mapStateToProps","user"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CACA;;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,KAAP,MAAkB,yBAAlB,C,CACA;;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,QAAP,MAAqB,yBAArB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,qBAAT,QAAsC,iCAAtC;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,CAAC;AACjCqB,IAAAA,QAAQ,EAAE;AADuB,GAAD,CAAlC;AAIA,QAAMC,aAAa,GAAGJ,KAAK,CAACI,aAA5B;AACA,QAAMD,QAAQ,GAAGF,KAAK,CAACE,QAAvB;AAEA,MAAIE,iBAAJ;AAEApB,EAAAA,KAAK,CAACqB,MAAN,CAAapB,YAAb;;AAEA,QAAMqB,UAAU,GAAIC,KAAD,IAAW;AAC5BN,IAAAA,QAAQ,CAAC,EAAE,GAAGD,KAAL;AAAYE,MAAAA,QAAQ,EAAEK,KAAK,CAACC;AAA5B,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMC,WAAW,GAAG,MAAM;AACxBR,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMQ,YAAY,GAAG,MAAM;AACzB,QAAIC,sBAAsB,GAAGZ,KAAK,CAACI,aAAN,CAC1BS,MAD0B,CAClBC,GAAD,IAAS,CAACA,GAAG,CAACC,IADK,EAE1BC,GAF0B,CAErBF,GAAD,IAASA,GAAG,CAACG,cAFS,CAA7B;AAGAjB,IAAAA,KAAK,CAACF,qBAAN,CAA4Bc,sBAA5B;AACD,GALD;;AAOA,MAAIR,aAAa,IAAIA,aAAa,CAACc,MAAd,GAAuB,CAA5C,EAA+C;AAC7Cd,IAAAA,aAAa,CAACS,MAAd,CAAsBC,GAAD,IAASA,GAAG,CAACC,IAAJ,KAAa,KAA3C,EAAkDG,MAAlD,GAA2D,CAA3D,GACKb,iBAAiB,gBAChB,oBAAC,KAAD;AACE,MAAA,YAAY,EACVD,aAAa,CAACS,MAAd,CAAsBC,GAAD,IAASA,GAAG,CAACC,IAAJ,KAAa,KAA3C,EAAkDG,MAFtD;AAIE,MAAA,KAAK,EAAC,WAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAME,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CAFN,GAWKb,iBAAiB,gBAAG,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXzB;AAYD,GAbD,MAaO;AACLA,IAAAA,iBAAiB,gBAAG,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAApB;AACD;;AAED,MAAIc,mBAAmB,GACrBf,aAAa,IAAIA,aAAa,CAACc,MAAd,GAAuB,CAAxC,GACEd,aAAa,CAACY,GAAd,CAAmBF,GAAD,IAAS;AACzB,UAAMM,IAAI,GAAGN,GAAG,CAACO,IAAJ,KAAa,MAAb,GAAsB,OAAtB,GAAgC,cAA7C;AACA,UAAMC,IAAI,GAAGrC,KAAK,CAAC6B,GAAG,CAACS,SAAL,CAAL,CAAqBC,OAArB,EAAb;AACA,UAAMC,SAAS,GAAGX,GAAG,CAACC,IAAJ,GAAW,SAAX,GAAuB,WAAzC;AACA,UAAMW,IAAI,GACRZ,GAAG,CAACO,IAAJ,KAAa,MAAb,gBACE,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAEI,SAArB;AAAgC,MAAA,KAAK,EAAE;AAAEE,QAAAA,WAAW,EAAE;AAAf,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,gBAGE,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEF,SAAjB;AAA4B,MAAA,KAAK,EAAE;AAAEE,QAAAA,WAAW,EAAE;AAAf,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ;AAMA,wBACE,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEb,GAAG,CAACS,SAAnB;AAA8B,MAAA,OAAO,EAAEb,WAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGgB,IADH,eAEE,oBAAC,UAAD;AACE,MAAA,SAAS,EAAE1C,IADb;AAEE,MAAA,KAAK,EAAC,SAFR;AAGE,MAAA,OAAO,EAAC,OAHV;AAIE,MAAA,EAAE,EAAG,UAAS8B,GAAG,CAACc,SAAU,WAAUd,GAAG,CAACe,QAAS,EAJrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMGf,GAAG,CAACgB,MANP,OAMgBV,IANhB,mBAMmCE,IANnC,CAFF,CADF;AAaD,GAvBD,CADF,gBA0BE,oBAAC,QAAD;AAAU,IAAA,OAAO,EAAEZ,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCA3BJ;AA8BA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAS,IAAA,SAAS,EAAC,KAAnB;AAAyB,IAAA,KAAK,EAAC,eAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AACE,IAAA,QAAQ,EAAEP,QAAQ,GAAG,aAAH,GAAmB4B,SADvC;AAEE,qBAAc,MAFhB;AAGE,IAAA,OAAO,EAAExB,UAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGF,iBALH,CADF,CADF,eAUE,oBAAC,IAAD;AACE,IAAA,QAAQ,EAAEF,QADZ;AAEE,IAAA,IAAI,EAAE6B,OAAO,CAAC7B,QAAD,CAFf;AAGE,IAAA,OAAO,EAAEO,WAHX;AAIE,IAAA,SAAS,EAAEC,YAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGQ,mBANH,CAVF,CADF;AAqBD;;AAEDpB,aAAa,CAACkC,SAAd,GAA0B;AACxBnC,EAAAA,qBAAqB,EAAEX,SAAS,CAAC+C,IAAV,CAAeC,UADd;AAExB/B,EAAAA,aAAa,EAAEjB,SAAS,CAACiD,MAAV,CAAiBD;AAFR,CAA1B;;AAKA,MAAME,eAAe,GAAIpC,KAAD,KAAY;AAClCG,EAAAA,aAAa,EAAEH,KAAK,CAACqC,IAAN,CAAWlC;AADQ,CAAZ,CAAxB;;AAIA,eAAeP,OAAO,CAACwC,eAAD,EAAkB;AAAEvC,EAAAA;AAAF,CAAlB,CAAP,CACbC,aADa,CAAf","sourcesContent":["import React, { useEffect, useState, Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\nimport PropTypes from \"prop-types\";\n//MUI stuff\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ToolTip from \"@material-ui/core/Tooltip\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Badge from \"@material-ui/core/Badge\";\n//Icons\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\n//Redux\nimport { connect } from \"react-redux\";\nimport { markNotificationsRead } from \"../../redux/actions/userActions\";\n\nfunction Notifications(props) {\n  const [state, setState] = useState({\n    anchorEl: null,\n  });\n\n  const notifications = props.notifications;\n  const anchorEl = state.anchorEl;\n\n  let notificationsIcon;\n\n  dayjs.extend(relativeTime);\n\n  const handleOpen = (event) => {\n    setState({ ...state, anchorEl: event.target });\n  };\n\n  const handleClose = () => {\n    setState({ anchorEl: null });\n  };\n\n  const onMenuOpened = () => {\n    let unreadNotificationsIds = props.notifications\n      .filter((not) => !not.read)\n      .map((not) => not.notificationId);\n    props.markNotificationsRead(unreadNotificationsIds);\n  };\n\n  if (notifications && notifications.length > 0) {\n    notifications.filter((not) => not.read === false).length > 0\n      ? (notificationsIcon = (\n          <Badge\n            badgeContent={\n              notifications.filter((not) => not.read === false).length\n            }\n            color=\"secondary\"\n          >\n            <NotificationsIcon />\n          </Badge>\n        ))\n      : (notificationsIcon = <NotificationsIcon />);\n  } else {\n    notificationsIcon = <NotificationsIcon />;\n  }\n\n  let notificationsMarkup =\n    notifications && notifications.length > 0 ? (\n      notifications.map((not) => {\n        const verb = not.type === \"like\" ? \"liked\" : \"commented on\";\n        const time = dayjs(not.createdAt).fromNow();\n        const iconColor = not.read ? \"primary\" : \"secondary\";\n        const icon =\n          not.type === \"like\" ? (\n            <FavoriteIcon color={iconColor} style={{ marginRight: 10 }} />\n          ) : (\n            <ChatIcon color={iconColor} style={{ marginRight: 10 }} />\n          );\n        return (\n          <MenuItem key={not.createdAt} onClick={handleClose}>\n            {icon}\n            <Typography\n              component={Link}\n              color=\"default\"\n              variant=\"body1\"\n              to={`/users/${not.recipient}/scream/${not.screamId}`}\n            >\n              {not.sender} {verb} your scream {time}\n            </Typography>\n          </MenuItem>\n        );\n      })\n    ) : (\n      <MenuItem onClick={handleClose}>You have no notifications yet</MenuItem>\n    );\n\n  return (\n    <Fragment>\n      <ToolTip placement=\"top\" title=\"Notifications\">\n        <IconButton\n          ariaowns={anchorEl ? \"simple-menu\" : undefined}\n          aria-haspopup=\"true\"\n          onClick={handleOpen}\n        >\n          {notificationsIcon}\n        </IconButton>\n      </ToolTip>\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n        onEntered={onMenuOpened}\n      >\n        {notificationsMarkup}\n      </Menu>\n    </Fragment>\n  );\n}\n\nNotifications.propTypes = {\n  markNotificationsRead: PropTypes.func.isRequired,\n  notifications: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  notifications: state.user.notifications,\n});\n\nexport default connect(mapStateToProps, { markNotificationsRead })(\n  Notifications\n);\n"]},"metadata":{},"sourceType":"module"}