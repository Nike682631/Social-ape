{"ast":null,"code":"import { SET_SCREAMS, LOADING_DATA, LIKE_SCREAM, UNLIKE_SCREAM, DELETE_SCREAM, LOADING_UI, SET_ERRORS, CLEAR_ERRORS, POST_SCREAM } from \"../types\";\nimport axios from \"axios\"; //get all screams'\n\nexport const getScreams = () => dispatch => {\n  dispatch({\n    type: LOADING_DATA\n  });\n  axios.get(\"/screams\").then(res => {\n    dispatch({\n      type: SET_SCREAMS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: SET_SCREAMS,\n      payload: []\n    });\n  });\n}; //Post a scream\n\nexport const postScream = newScream => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post(\"/scream\", newScream).then(res => {\n    dispatch({\n      type: POST_SCREAM,\n      payload: res.data\n    });\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // Like a scream\n\nexport const likeScream = screamId => dispatch => {\n  axios.get(`/scream/${screamId}/like`).then(res => {\n    dispatch({\n      type: LIKE_SCREAM,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.lod(err);\n  });\n}; // Unlike a scream\n\nexport const unlikeScream = screamId => dispatch => {\n  axios.get(`/scream/${screamId}/unlike`).then(res => {\n    dispatch({\n      type: UNLIKE_SCREAM,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const deleteScream = screamId => dispatch => {\n  axios.delete(`/scream/${screamId}`).then(() => {\n    dispatch({\n      type: DELETE_SCREAM,\n      payload: screamId\n    });\n  }).catch(err => console.log(err));\n};\nexport const clearErrors = () => dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["/home/nikunj/socialape-client/src/redux/actions/dataActions.js"],"names":["SET_SCREAMS","LOADING_DATA","LIKE_SCREAM","UNLIKE_SCREAM","DELETE_SCREAM","LOADING_UI","SET_ERRORS","CLEAR_ERRORS","POST_SCREAM","axios","getScreams","dispatch","type","get","then","res","payload","data","catch","err","postScream","newScream","post","response","likeScream","screamId","console","lod","unlikeScream","log","deleteScream","delete","clearErrors"],"mappings":"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","sourcesContent":["import {\n  SET_SCREAMS,\n  LOADING_DATA,\n  LIKE_SCREAM,\n  UNLIKE_SCREAM,\n  DELETE_SCREAM,\n  LOADING_UI,\n  SET_ERRORS,\n  CLEAR_ERRORS,\n  POST_SCREAM,\n} from \"../types\";\nimport axios from \"axios\";\n\n//get all screams'\nexport const getScreams = () => (dispatch) => {\n  dispatch({ type: LOADING_DATA });\n  axios\n    .get(\"/screams\")\n    .then((res) => {\n      dispatch({\n        type: SET_SCREAMS,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch({\n        type: SET_SCREAMS,\n        payload: [],\n      });\n    });\n};\n\n//Post a scream\nexport const postScream = (newScream) => (dispatch) => {\n  dispatch({ type: LOADING_UI });\n  axios\n    .post(\"/scream\", newScream)\n    .then((res) => {\n      dispatch({\n        type: POST_SCREAM,\n        payload: res.data,\n      });\n      dispatch({\n        type: CLEAR_ERRORS,\n      });\n    })\n    .catch((err) => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err.response.data,\n      });\n    });\n};\n\n// Like a scream\nexport const likeScream = (screamId) => (dispatch) => {\n  axios\n    .get(`/scream/${screamId}/like`)\n    .then((res) => {\n      dispatch({\n        type: LIKE_SCREAM,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      console.lod(err);\n    });\n};\n// Unlike a scream\nexport const unlikeScream = (screamId) => (dispatch) => {\n  axios\n    .get(`/scream/${screamId}/unlike`)\n    .then((res) => {\n      dispatch({\n        type: UNLIKE_SCREAM,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n};\n\nexport const deleteScream = (screamId) => (dispatch) => {\n  axios\n    .delete(`/scream/${screamId}`)\n    .then(() => {\n      dispatch({\n        type: DELETE_SCREAM,\n        payload: screamId,\n      });\n    })\n    .catch((err) => console.log(err));\n};\n\nexport const clearErrors = () => (dispatch) => {\n  dispatch({ type: CLEAR_ERRORS });\n};\n"]},"metadata":{},"sourceType":"module"}